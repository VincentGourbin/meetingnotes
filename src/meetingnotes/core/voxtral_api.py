"""
Module de traitement direct avec l'API Voxtral de Mistral.

Ce module fournit les fonctions de traitement audio
avec l'API Mistral Voxtral pour la transcription et l'analyse.
"""

from typing import Dict, List, Optional
from ..ai import VoxtralAPIAnalyzer


def on_transcribe_voxtral_api(
    mapping_table,
    segments: List[Dict],
    wav_path: str,
    mistral_api_key: str,
    language: str = "french",
    meeting_type: str = "information"
) -> Dict[str, str]:
    """
    Transcrit l'audio avec l'API Voxtral en mode avec diarisation.
    
    Args:
        mapping_table: Tableau de correspondance des locuteurs
        segments (List[Dict]): Segments de diarisation
        wav_path (str): Chemin vers le fichier audio
        mistral_api_key (str): Cl√© API Mistral
        language (str): Langue attendue
        meeting_type (str): Type de r√©union
        
    Returns:
        Dict[str, str]: R√©sultats avec 'transcription'
    """
    analyzer = None
    try:
        print("üåê D√©marrage de la transcription avec l'API Voxtral...")
        
        # Cr√©er l'instance de l'analyseur API
        analyzer = VoxtralAPIAnalyzer(mistral_api_key)
        
        # Transcription avec segments de diarisation
        results = analyzer.transcribe_and_understand(
            wav_path=wav_path,
            segments=segments,
            language=language,
            include_summary=False,  # Pas de r√©sum√© automatique
            meeting_type=meeting_type
        )
        
        print("‚úÖ Transcription API termin√©e avec succ√®s")
        return results
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la transcription API: {e}")
        return {"transcription": f"‚ùå Erreur lors de la transcription API: {str(e)}"}
    
    finally:
        # Pas de nettoyage sp√©cial n√©cessaire pour l'API
        print("üßπ Nettoyage API termin√©")


def on_transcribe_direct_voxtral_api(
    wav_path: str,
    mistral_api_key: str,
    language: str = "french",
    meeting_type: str = "information"
) -> Dict[str, str]:
    """
    Transcrit directement l'audio avec l'API Voxtral (sans diarisation).
    
    Args:
        wav_path (str): Chemin vers le fichier audio
        mistral_api_key (str): Cl√© API Mistral
        language (str): Langue attendue
        meeting_type (str): Type de r√©union
        
    Returns:
        Dict[str, str]: R√©sultats avec 'transcription'
    """
    analyzer = None
    try:
        print("üåê D√©marrage de la transcription directe avec l'API Voxtral...")
        
        # Cr√©er l'instance de l'analyseur API
        analyzer = VoxtralAPIAnalyzer(mistral_api_key)
        
        # Transcription directe sans segments de diarisation
        results = analyzer.transcribe_and_understand(
            wav_path=wav_path,
            segments=None,  # Pas de diarisation
            language=language,
            include_summary=False,  # Pas de r√©sum√© automatique
            meeting_type=meeting_type
        )
        
        print("‚úÖ Transcription API directe termin√©e avec succ√®s")
        return results
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la transcription API directe: {e}")
        return {"transcription": f"‚ùå Erreur lors de la transcription API directe: {str(e)}"}
    
    finally:
        # Pas de nettoyage sp√©cial n√©cessaire pour l'API
        print("üßπ Nettoyage API direct termin√©")


def on_audio_direct_analysis_api(
    wav_path: str,
    mistral_api_key: str,
    model_name: str = "voxtral-mini-latest", 
    language: str = "french",
    meeting_type: str = "information",
    chunk_duration_minutes: int = 15,
    reference_speakers_data=None
) -> Dict[str, str]:
    """
    Analyse directe de l'audio par chunks avec l'API Voxtral.
    
    Args:
        wav_path (str): Chemin vers le fichier audio
        mistral_api_key (str): Cl√© API Mistral
        model_name (str): Nom du mod√®le API √† utiliser
        language (str): Langue attendue
        meeting_type (str): Type de r√©union
        chunk_duration_minutes (int): Dur√©e des chunks en minutes
        reference_speakers_data: Donn√©es des locuteurs de r√©f√©rence identifi√©s
        
    Returns:
        Dict[str, str]: R√©sultats avec 'transcription' (analyse concat√©n√©e)
    """
    analyzer = None
    try:
        print("üåê D√©marrage de l'analyse directe avec l'API Voxtral...")
        
        # Cr√©er l'instance de l'analyseur API avec le mod√®le choisi
        analyzer = VoxtralAPIAnalyzer(mistral_api_key, model_name)
        
        # Analyse directe par chunks avec audio instruct mode
        results = analyzer.analyze_audio_chunks_api(
            wav_path=wav_path,
            language=language,
            meeting_type=meeting_type,
            chunk_duration_minutes=chunk_duration_minutes,
            reference_speakers_data=reference_speakers_data
        )
        
        print("‚úÖ Analyse directe API termin√©e avec succ√®s")
        return results
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'analyse directe API: {e}")
        return {"transcription": f"‚ùå Erreur lors de l'analyse directe API: {str(e)}"}
    
    finally:
        # Pas de nettoyage sp√©cial n√©cessaire pour l'API
        print("üßπ Nettoyage analyse directe API termin√©")