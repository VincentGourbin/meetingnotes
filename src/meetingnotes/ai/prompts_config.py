"""
Configuration centralis√©e des prompts pour Voxtral.

Ce module contient tous les prompts utilis√©s par les analyseurs Voxtral
pour diff√©rents types d'analyses et modes de traitement.
"""


class VoxtralPrompts:
    """Classe contenant tous les prompts syst√®me pour Voxtral."""
    
    # ====================================
    # SECTIONS DISPONIBLES POUR LES R√âSUM√âS
    # ====================================
    
    AVAILABLE_SECTIONS = {
        "resume_executif": {
            "title": "## R√âSUM√â EX√âCUTIF",
            "description": "Aper√ßu du but de ce segment de r√©union et des r√©sultats",
            "default_action": True,
            "default_info": True
        },
        "discussions_principales": {
            "title": "## DISCUSSIONS PRINCIPALES", 
            "description": "Sujets principaux abord√©s et points importants soulev√©s",
            "default_action": True,
            "default_info": False
        },
        "sujets_principaux": {
            "title": "## SUJETS PRINCIPAUX",
            "description": "Sujets cl√©s discut√©s et informations pr√©sent√©es", 
            "default_action": False,
            "default_info": True
        },
        "plan_action": {
            "title": "## PLAN D'ACTION",
            "description": "Liste compl√®te des actions avec :\n- T√¢ches sp√©cifiques et livrables\n- Responsabilit√©s assign√©es\n- √âch√©ances et d√©lais\n- Niveaux de priorit√©",
            "default_action": True,
            "default_info": False
        },
        "decisions_prises": {
            "title": "## D√âCISIONS PRISES",
            "description": "Toutes les d√©cisions prises pendant ce segment",
            "default_action": True,
            "default_info": False
        },
        "points_importants": {
            "title": "## POINTS IMPORTANTS", 
            "description": "D√©couvertes importantes, donn√©es ou insights partag√©s",
            "default_action": False,
            "default_info": True
        },
        "questions_discussions": {
            "title": "## QUESTIONS & DISCUSSIONS",
            "description": "Questions principales pos√©es et discussions tenues",
            "default_action": False,
            "default_info": True
        },
        "prochaines_etapes": {
            "title": "## PROCHAINES √âTAPES",
            "description": "Actions de suivi et r√©unions futures planifi√©es", 
            "default_action": True,
            "default_info": False
        },
        "elements_suivi": {
            "title": "## √âL√âMENTS DE SUIVI",
            "description": "Informations de suivi ou clarifications n√©cessaires",
            "default_action": False,
            "default_info": True
        }
    }
    
    @staticmethod
    def get_meeting_summary_prompt(selected_sections: list, speaker_references: str = "", chunk_info: str = "", previous_context: str = "") -> str:
        """
        G√©n√®re le prompt de r√©sum√© de r√©union selon les sections s√©lectionn√©es.
        
        Args:
            selected_sections (list): Liste des cl√©s de sections √† inclure
            speaker_references (str): Contexte de diarisation avec balises (optionnel)
            chunk_info (str): Information sur le segment audio (optionnel)
            previous_context (str): Contexte des segments pr√©c√©dents (optionnel)
            
        Returns:
            str: Prompt format√©
        """
        # Contexte de diarisation
        diarization_context = ""
        if speaker_references and speaker_references.strip():
            diarization_context = f"""

CONTEXTE POUR TON ANALYSE (ne pas inclure dans ta r√©ponse) :
Les diff√©rents locuteurs ont √©t√© identifi√©s automatiquement dans l'audio : {speaker_references}
Utilise ces informations pour enrichir ton analyse mais ne les affiche pas dans ta r√©ponse finale.

"""
        
        # Contexte des segments pr√©c√©dents
        previous_summary_context = ""
        if previous_context and previous_context.strip():
            previous_summary_context = f"""

CONTEXTE DES SEGMENTS PR√âC√âDENTS (ne pas inclure dans ta r√©ponse) :
Voici ce qui s'est pass√© dans les segments audio pr√©c√©dents :
{previous_context}

Utilise ces informations pour assurer la continuit√© et √©viter les r√©p√©titions, mais concentre-toi sur le nouveau contenu de ce segment.

"""
        
        # Information sur le segment audio
        segment_context = ""
        if chunk_info and chunk_info.strip():
            segment_context = f"""

IMPORTANT : Tu analyses un segment ({chunk_info}) extrait d'un enregistrement audio plus long.
Ce segment peut commencer ou se terminer au milieu de phrases/discussions.
Concentre-toi sur le contenu de ce segment tout en gardant √† l'esprit qu'il fait partie d'un ensemble plus large.

"""
        
        # Construction des sections s√©lectionn√©es
        sections_text = ""
        print(f"üîç Debug sections s√©lectionn√©es: {selected_sections}")
        for section_key in selected_sections:
            if section_key in VoxtralPrompts.AVAILABLE_SECTIONS:
                section = VoxtralPrompts.AVAILABLE_SECTIONS[section_key]
                sections_text += f"\n{section['title']}\n{section['description']}\n"
                print(f"‚úÖ Section ajout√©e: {section['title']}")
            else:
                print(f"‚ùå Section inconnue: {section_key}")
        
        return f"""√âcoute ce segment audio de r√©union et fournis un r√©sum√© structur√© complet :{diarization_context}{previous_summary_context}{segment_context}
{sections_text}
Formate ta r√©ponse en markdown exactement comme montr√© ci-dessus."""
    
    @staticmethod
    def get_default_sections(meeting_type: str) -> list:
        """
        Retourne les sections par d√©faut selon le type de r√©union.
        
        Args:
            meeting_type (str): "action" ou "information"
            
        Returns:
            list: Liste des cl√©s de sections par d√©faut
        """
        if "action" in meeting_type.lower():
            return [key for key, section in VoxtralPrompts.AVAILABLE_SECTIONS.items() 
                   if section["default_action"]]
        else:
            return [key for key, section in VoxtralPrompts.AVAILABLE_SECTIONS.items() 
                   if section["default_info"]]
    
    @staticmethod
    def get_synthesis_prompt(selected_sections: list, chunk_summaries: list) -> str:
        """
        G√©n√®re le prompt pour synth√©tiser plusieurs r√©sum√©s de chunks.
        
        Args:
            selected_sections (list): Liste des cl√©s de sections demand√©es
            chunk_summaries (list): Liste des r√©sum√©s de chunks √† synth√©tiser
            
        Returns:
            str: Prompt de synth√®se format√©
        """
        # Construction des sections s√©lectionn√©es
        sections_text = ""
        for section_key in selected_sections:
            if section_key in VoxtralPrompts.AVAILABLE_SECTIONS:
                section = VoxtralPrompts.AVAILABLE_SECTIONS[section_key]
                sections_text += f"\n{section['title']}\n{section['description']}\n"
        
        # Assembler tous les r√©sum√©s de chunks
        all_chunks_text = "\n\n=== S√âPARATEUR DE SEGMENT ===\n\n".join(chunk_summaries)
        
        return f"""Tu vas recevoir plusieurs analyses de segments d'une m√™me r√©union audio.
Ton r√¥le est de les synth√©tiser en un r√©sum√© global coh√©rent et structur√©.

ANALYSES DES SEGMENTS √Ä SYNTH√âTISER :
{all_chunks_text}

IMPORTANT : 
- √âvite les r√©p√©titions entre segments
- Identifie les √©l√©ments r√©currents et unifie-les
- Assure la coh√©rence temporelle et logique
- Produis un r√©sum√© global qui refl√®te l'ensemble de la r√©union

G√©n√®re un r√©sum√© final structur√© selon ces sections :
{sections_text}
Formate ta r√©ponse en markdown exactement comme montr√© ci-dessus."""
